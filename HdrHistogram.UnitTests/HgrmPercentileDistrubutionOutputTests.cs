using System.Globalization;
using System.IO;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

namespace HdrHistogram.UnitTests
{
    /// <summary>
    /// Validates against files generated by the official Java implementation.
    /// </summary>

    public sealed class HgrmPercentileDistrubutionOutputTests
    {
        [Theory, CombinatorialData]
        public async Task PercentileDistrubution_hgrm_output_is_in_correct_formatAsync(
            [CombinatorialValues(36000000000)]long highestTrackableValue,
            [CombinatorialValues(1, 2, 3, 4, 5)]int signigicantDigits,
            [CombinatorialValues(10000.0)]double scaling,
            [CombinatorialValues(5, 10, 20)]int percentileTicksPerHalfDistance)
        {
            var fileName = $"Sample_10kBy1k_{signigicantDigits}sf_TicksPerHour_asMs_{percentileTicksPerHalfDistance}percPerHalfDistance.hgrm";
            var expected = GetEmbeddedFileText(fileName);

            var histogram = new LongHistogram(highestTrackableValue, signigicantDigits);
            LoadHistogram(histogram);

            var writer = new StringWriter();
            await histogram.OutputPercentileDistributionAsync(writer, percentileTicksPerHalfDistance, scaling).ConfigureAwait(false);
            var actual = writer.ToString();

            Assert.Equal(expected, actual);
        }

        [Theory, CombinatorialData]
        public async Task PercentileDistrubution_csv_output_is_in_correct_formatAsync(
            [CombinatorialValues(36000000000)]long highestTrackableValue,
            [CombinatorialValues(1, 2, 3, 4, 5)]int signigicantDigits,
            [CombinatorialValues(10000.0)]double scaling,
            [CombinatorialValues(5, 10, 20)]int percentileTicksPerHalfDistance)
        {
            var fileName = $"Sample_10kBy1k_{signigicantDigits}sf_TicksPerHour_asMs_{percentileTicksPerHalfDistance}percPerHalfDistance.csv";
            var expected = GetEmbeddedFileText(fileName);

            var histogram = new LongHistogram(highestTrackableValue, signigicantDigits);
            LoadHistogram(histogram);

            var writer = new StringWriter();
            await histogram.OutputPercentileDistributionAsync(writer, percentileTicksPerHalfDistance, scaling, true).ConfigureAwait(false);
            var actual = writer.ToString();

            Assert.Equal(expected, actual);
        }

        [Fact] //BUG https://github.com/HdrHistogram/HdrHistogram.NET/issues/39
        public async Task OnlySingleValueFlaggedAsLastValueAsync()
        {

            //https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/
            /*
             * Real value :
             *      percentile = 0.9997802734375
             * HgrmOutputFormatter USES :
             *      string.Format("{x,2:F12}, percentile)
             *      
             * netfx => netcoreapp2.2 returns
             *      0.999780273438 (rounded)
             *
             * netcoreapp3.x now returns
             *      0.999780273437 (truncated)
             *
             * Explanation from the blog :
             * For the remaining format-specifiers that take a precision ("C", "E", "F", "N", and "P"),
             * there is no mechanism to fallback to the old behavior.
             * The previous behavior would clamp precisions greater than 14 (exclusive) to be 17 for "E" and 15 for the others.
             * However, this only impacted the significant digits that would be displayed,
             * the remaining digits (even if available) would be filled in as zero.
             */
#if NETCOREAPP3_1
            var expected = GetEmbeddedFileText("IsLastValueBug_netcoreapp3.hgrm");
#else
            var expected = GetEmbeddedFileText("IsLastValueBug.hgrm");
#endif
            var histogram = new LongHistogram(highestTrackableValue: 36000000000, numberOfSignificantValueDigits: 3);
            histogram.RecordValueWithCount(1L, 7604459);
            histogram.RecordValueWithCount(383, 2395524);
            histogram.RecordValueWithCount(453, 2);
            histogram.RecordValueWithCount(511, 2);
            histogram.RecordValueWithCount(537, 3);
            histogram.RecordValueWithCount(672, 1);
            histogram.RecordValueWithCount(777, 1);
            histogram.RecordValueWithCount(18143, 1);
            histogram.RecordValueWithCount(208127, 1);
            histogram.RecordValueWithCount(224639, 1);
            histogram.RecordValueWithCount(229759, 1);
            histogram.RecordValueWithCount(230271, 1);
            histogram.RecordValueWithCount(258943, 1);
            histogram.RecordValueWithCount(275711, 1);
            histogram.RecordValueWithCount(282111, 1);

            var writer = new StringWriter();
            await histogram.OutputPercentileDistributionAsync(writer).ConfigureAwait(false);
            var actual = writer.ToString();

            Assert.Equal(expected, actual);
        }

        private Stream GetEmbeddedFileStream(string filename)
        {
            var fileName = string.Format(CultureInfo.InvariantCulture, "HdrHistogram.UnitTests.Resources.{0}", filename);
            return GetType().GetTypeInfo()
                .Assembly
                .GetManifestResourceStream(fileName);
        }

        private string GetEmbeddedFileText(string filename)
        {
            using var stream = GetEmbeddedFileStream(filename);
            var reader = new StreamReader(stream);
            return reader.ReadToEnd().Replace("\r\n", "\n");
        }

        private static void LoadHistogram(IRecorder histogram)
        {
            for (var i = 0; i < 10000; i += 1000)
            {
                histogram.RecordValue(i);
            }
        }
    }
}
